## Copyright (c) 1995-2006 Xilinx, Inc.  All rights reserved.

## You may copy and modify these files for your own internal use solely with
## Xilinx programmable logic devices and  Xilinx EDK system or create IP
## modules solely for Xilinx programmable logic devices and Xilinx EDK system.
## No rights are granted to distribute any files unless they are distributed in
## Xilinx programmable logic devices.
###################################################################
##
## Name     : opb_gpio
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN opb_gpio

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION LAST_UPDATED = 8.1
OPTION USAGE_LEVEL = BASE_USER
OPTION DESC = OPB General Purpose IO
OPTION LONG_DESC = General Purpose Input/Output (GPIO) core for the On-Chip Peripheral Bus (OPB) bus.
OPTION IP_GROUP = General Purpose IO:MICROBLAZE:PPC
OPTION ARCH_SUPPORT = qrvirtex2:qvirtex2:spartan2:spartan2e:spartan3:virtex:virtex2:virtex2p:virtex4:virtexe:spartan3e
OPTION CORE_STATE = ACTIVE

IO_INTERFACE IO_IF = gpio_0, IO_TYPE = XIL_GPIO_V1

## Bus Interfaces
BUS_INTERFACE BUS = SOPB, BUS_STD = OPB, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SOPB, ADDRESS = BASE, PAIR = C_HIGHADDR, MIN_SIZE = 0x200
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SOPB, ADDRESS = HIGH, PAIR = C_BASEADDR
PARAMETER C_USER_ID_CODE = 3, DT = INTEGER, RANGE = (0:255)
PARAMETER C_OPB_AWIDTH = 32, DT = INTEGER, BUS = SOPB, ASSIGNMENT = CONSTANT
PARAMETER C_OPB_DWIDTH = 32, DT = INTEGER, BUS = SOPB, ASSIGNMENT = CONSTANT
PARAMETER C_FAMILY = virtex2, DT = STRING
PARAMETER C_GPIO_WIDTH = 32, DT = INTEGER, RANGE = (1:32), PERMIT = BASE_USER, DESC = GPIO Data Width, IO_IF = gpio_0, IO_IS = num_bits
PARAMETER C_ALL_INPUTS = 0, DT = INTEGER, PERMIT = BASE_USER, RANGE = (0,1), DESC = Data pins are all inputs, IO_IF = gpio_0, IO_IS = all_inputs, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_INTERRUPT_PRESENT = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_IS_BIDIR = 1, DT = INTEGER, PERMIT = BASE_USER, RANGE = (0,1), DESC = Data pins are bi-directional, IO_IF = gpio_0, IO_IS = is_bidir, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_DOUT_DEFAULT = 0x00000000, DT = std_logic_vector
PARAMETER C_TRI_DEFAULT = 0xffffffff, DT = std_logic_vector
PARAMETER C_IS_DUAL = 0, DT = INTEGER, RANGE = (0,1), DESC = Use Dual GPIO, IO_IF = gpio_0, IO_IS = is_dual
PARAMETER C_ALL_INPUTS_2 = 0, DT = INTEGER, RANGE = (0,1), DESC = GPIO2 Data All Inputs, IO_IF = gpio_0, IO_IS = all_inputs_2
PARAMETER C_IS_BIDIR_2 = 1, DT = INTEGER, RANGE = (0,1), DESC = Use GPIO2 Bidir IO Pin, IO_IF = gpio_0, IO_IS = is_bidir_2
PARAMETER C_DOUT_DEFAULT_2 = 0x00000000, DT = std_logic_vector
PARAMETER C_TRI_DEFAULT_2 = 0xffffffff, DT = std_logic_vector

## Ports
PORT OPB_ABus = OPB_ABus, DIR = I, VEC = [0:(C_OPB_AWIDTH-1)], BUS = SOPB
PORT OPB_BE = OPB_BE, DIR = I, VEC = [0:((C_OPB_DWIDTH/8)-1)], BUS = SOPB
PORT OPB_Clk = "", DIR = I, SIGIS = Clk, BUS = SOPB
PORT OPB_DBus = OPB_DBus, DIR = I, VEC = [0:(C_OPB_DWIDTH-1)], BUS = SOPB
PORT OPB_RNW = OPB_RNW, DIR = I, BUS = SOPB
PORT OPB_Rst = OPB_Rst, DIR = I, SIGIS = Rst, BUS = SOPB
PORT OPB_select = OPB_select, DIR = I, BUS = SOPB
PORT OPB_seqAddr = OPB_seqAddr, DIR = I, BUS = SOPB
PORT Sln_DBus = Sl_DBus, DIR = O, VEC = [0:(C_OPB_DWIDTH-1)], BUS = SOPB
PORT Sln_errAck = Sl_errAck, DIR = O, BUS = SOPB
PORT Sln_retry = Sl_retry, DIR = O, BUS = SOPB
PORT Sln_toutSup = Sl_toutSup, DIR = O, BUS = SOPB
PORT Sln_xferAck = Sl_xferAck, DIR = O, BUS = SOPB
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = MEDIUM
PORT GPIO_IO = "", DIR = IO, VEC = [0:(C_GPIO_WIDTH-1)], THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'GPIO1 Data IO', IO_IF = gpio_0, IO_IS = gpio_io
PORT GPIO_in = "", DIR = I, VEC = [0:(C_GPIO_WIDTH-1)], PERMIT = BASE_USER, DESC = 'GPIO1 Data In', IO_IF = gpio_0, IO_IS = gpio_data_in
PORT GPIO_d_out = "", DIR = O, VEC = [0:(C_GPIO_WIDTH-1)], PERMIT = BASE_USER, DESC = 'GPIO1 Data Out', IO_IF = gpio_0, IO_IS = gpio_data_out
PORT GPIO_t_out = "", DIR = O, VEC = [0:(C_GPIO_WIDTH-1)], PERMIT = BASE_USER, DESC = 'GPIO1 TriState Out', IO_IF = gpio_0, IO_IS = gpio_tri_out
PORT GPIO2_IO = "", DIR = IO, VEC = [0:(C_GPIO_WIDTH-1)], THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'GPIO2 Data IO', IO_IF = gpio_0, IO_IS = gpio_io_2
PORT GPIO2_in = "", DIR = I, VEC = [0:(C_GPIO_WIDTH-1)], PERMIT = BASE_USER, DESC = 'GPIO2 Data In', IO_IF = gpio_0, IO_IS = gpio_data_in_2
PORT GPIO2_d_out = "", DIR = O, VEC = [0:(C_GPIO_WIDTH-1)], PERMIT = BASE_USER, DESC = 'GPIO2 Data Out', IO_IF = gpio_0, IO_IS = gpio_data_out_2
PORT GPIO2_t_out = "", DIR = O, VEC = [0:(C_GPIO_WIDTH-1)], PERMIT = BASE_USER, DESC = 'GPIO2 TriState Out', IO_IF = gpio_0, IO_IS = gpio_tri_out_2

END
