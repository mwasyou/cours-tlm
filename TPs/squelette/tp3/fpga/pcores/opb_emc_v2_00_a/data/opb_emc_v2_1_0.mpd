## Copyright (c) 1995-2006 Xilinx, Inc.  All rights reserved.

## You may copy and modify these files for your own internal use solely with
## Xilinx programmable logic devices and  Xilinx EDK system or create IP
## modules solely for Xilinx programmable logic devices and Xilinx EDK system.
## No rights are granted to distribute any files unless they are distributed in
## Xilinx programmable logic devices.
###################################################################
##
## Name     : opb_emc
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN opb_emc

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION LAST_UPDATED = 8.1.1
OPTION USAGE_LEVEL = BASE_USER
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION DESC = OPB External Memory Controller
OPTION LONG_DESC = On-Chip Peripheral Bus (OPB) External Memory Controller for SRAM and flash
OPTION IP_GROUP = Memory Controller:MICROBLAZE:PPC
OPTION ARCH_SUPPORT = qrvirtex2:qvirtex2:spartan2:spartan2e:spartan3:virtex:virtex2:virtex2p:virtex4:virtexe:spartan3e
OPTION CORE_STATE = ACTIVE

IO_INTERFACE IO_IF = emc_0, IO_TYPE = XIL_EMC_V1

## Bus Interfaces
BUS_INTERFACE BUS = SOPB, BUS_STD = OPB, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_NUM_BANKS_MEM = 2, DT = INTEGER, RANGE = (1:4), IO_IF = emc_0, IO_IS = C_NUM_BANKS_MEM
PARAMETER C_INCLUDE_BURST = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_INCLUDE_BURST
PARAMETER C_INCLUDE_NEGEDGE_IOREGS = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_INCLUDE_NEGEDGE_IOREGS
PARAMETER C_FAMILY = virtex2, DT = STRING
PARAMETER C_MEM0_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SOPB, ADDRESS = BASE, PAIR = C_MEM0_HIGHADDR, ASSIGNMENT = REQUIRE, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, PERMIT = BASE_USER, DESC = Bank 0 Base Address, IO_IF = emc_0, IO_IS = C_MEM0_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=1)
PARAMETER C_MEM0_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SOPB, ADDRESS = HIGH, PAIR = C_MEM0_BASEADDR, ASSIGNMENT = REQUIRE, PERMIT = BASE_USER, DESC = Bank 0 High Address, IO_IF = emc_0, IO_IS = C_MEM0_HIGHADDR
PARAMETER C_MEM1_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SOPB, ADDRESS = BASE, PAIR = C_MEM1_HIGHADDR, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, DESC = Bank 1 Base Address, IO_IF = emc_0, IO_IS = C_MEM1_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=2)
PARAMETER C_MEM1_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SOPB, ADDRESS = HIGH, PAIR = C_MEM1_BASEADDR, DESC = Bank 1 High Address, IO_IF = emc_0, IO_IS = C_MEM1_HIGHADDR
PARAMETER C_MEM2_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SOPB, ADDRESS = BASE, PAIR = C_MEM2_HIGHADDR, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, DESC = Bank 2 Base Address, IO_IF = emc_0, IO_IS = C_MEM2_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=3)
PARAMETER C_MEM2_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SOPB, ADDRESS = HIGH, PAIR = C_MEM2_BASEADDR, DESC = Bank 2 High Address, IO_IF = emc_0, IO_IS = C_MEM2_HIGHADDR
PARAMETER C_MEM3_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SOPB, ADDRESS = BASE, PAIR = C_MEM3_HIGHADDR, ADDR_TYPE = MEMORY, MIN_SIZE = 0x08, DESC = Bank 3 Base Address, IO_IF = emc_0, IO_IS = C_MEM3_BASEADDR, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=4)
PARAMETER C_MEM3_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SOPB, ADDRESS = HIGH, PAIR = C_MEM3_BASEADDR, DESC = Bank 3 High Address, IO_IF = emc_0, IO_IS = C_MEM3_HIGHADDR
PARAMETER C_MEM0_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32), PERMIT = BASE_USER, DESC = Data Width, IO_IF = emc_0, IO_IS = C_MEM0_WIDTH
PARAMETER C_MEM1_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32), DESC = Bank 1 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM1_WIDTH
PARAMETER C_MEM2_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32), DESC = Bank 2 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM2_WIDTH
PARAMETER C_MEM3_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32), DESC = Bank 3 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM3_WIDTH
PARAMETER C_MAX_MEM_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32), PERMIT = BASE_USER, DESC = Maximum Data Width, IO_IF = emc_0, IO_IS = C_MAX_MEM_WIDTH
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_0 = 1, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_0, PERMIT = BASE_USER, DESC = Match width of memory data bus to OPB data bus, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_1 = 1, DT = INTEGER, RANGE = (0:1), DESC = Match data bus width of Mem Bank 1 to OPB, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_1
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_2 = 1, DT = INTEGER, RANGE = (0:1), DESC = Match data bus width of Mem Bank 2 to OPB, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_2
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_3 = 1, DT = INTEGER, RANGE = (0:1), DESC = Match data bus width of Mem Bank 3 to OPB, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_3
PARAMETER C_SYNCH_MEM_0 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_SYNCH_MEM_0, PERMIT = BASE_USER, DESC = Memory Type, VALUES = (0= Asynchronous , 1= Synchronous )
PARAMETER C_SYNCH_PIPEDELAY_0 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_0
PARAMETER C_TAVDV_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_0
PARAMETER C_THZCE_PS_MEM_0 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_0
PARAMETER C_THZOE_PS_MEM_0 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_0
PARAMETER C_TWC_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_0
PARAMETER C_TWP_PS_MEM_0 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_0
PARAMETER C_TLZWE_PS_MEM_0 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_0
PARAMETER C_SYNCH_MEM_1 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_SYNCH_MEM_1
PARAMETER C_SYNCH_PIPEDELAY_1 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_1
PARAMETER C_TAVDV_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_1
PARAMETER C_THZCE_PS_MEM_1 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_1
PARAMETER C_THZOE_PS_MEM_1 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_1
PARAMETER C_TWC_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_1
PARAMETER C_TWP_PS_MEM_1 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_1
PARAMETER C_TLZWE_PS_MEM_1 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_1
PARAMETER C_SYNCH_MEM_2 = 0, DT = INTEGER, RANGE = (0:1)
PARAMETER C_SYNCH_PIPEDELAY_2 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_2
PARAMETER C_TAVDV_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_2
PARAMETER C_THZCE_PS_MEM_2 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_2
PARAMETER C_THZOE_PS_MEM_2 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_2
PARAMETER C_TWC_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_2
PARAMETER C_TWP_PS_MEM_2 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_2
PARAMETER C_TLZWE_PS_MEM_2 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_2
PARAMETER C_SYNCH_MEM_3 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_SYNCH_MEM_3
PARAMETER C_SYNCH_PIPEDELAY_3 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_3
PARAMETER C_TAVDV_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_3
PARAMETER C_THZCE_PS_MEM_3 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_3
PARAMETER C_THZOE_PS_MEM_3 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_3
PARAMETER C_TWC_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_3
PARAMETER C_TWP_PS_MEM_3 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_3
PARAMETER C_TLZWE_PS_MEM_3 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_3
PARAMETER C_OPB_DWIDTH = 32, DT = INTEGER, BUS = SOPB, ASSIGNMENT = CONSTANT
PARAMETER C_OPB_AWIDTH = 32, DT = INTEGER, BUS = SOPB, ASSIGNMENT = CONSTANT
PARAMETER C_OPB_CLK_PERIOD_PS = 10000, DT = INTEGER, BUS = SOPB, IO_IS = clk_freq

## Ports
PORT OPB_Clk = "", DIR = I, SIGIS = Clk, BUS = SOPB
PORT OPB_Rst = OPB_Rst, DIR = I, SIGIS = Rst, BUS = SOPB
PORT OPB_ABus = OPB_ABus, DIR = I, VEC = [0:(C_OPB_AWIDTH-1)], BUS = SOPB
PORT OPB_DBus = OPB_DBus, DIR = I, VEC = [0:(C_OPB_DWIDTH-1)], BUS = SOPB
PORT Sln_DBus = Sl_DBus, DIR = O, VEC = [0:(C_OPB_DWIDTH-1)], BUS = SOPB
PORT OPB_select = OPB_select, DIR = I, BUS = SOPB
PORT OPB_RNW = OPB_RNW, DIR = I, BUS = SOPB
PORT OPB_seqAddr = OPB_seqAddr, DIR = I, BUS = SOPB
PORT OPB_BE = OPB_BE, DIR = I, VEC = [0:((C_OPB_DWIDTH/8)-1)], BUS = SOPB
PORT Sln_xferAck = Sl_xferAck, DIR = O, BUS = SOPB
PORT Sln_errAck = Sl_errAck, DIR = O, BUS = SOPB
PORT Sln_toutSup = Sl_toutSup, DIR = O, BUS = SOPB
PORT Sln_retry = Sl_retry, DIR = O, BUS = SOPB
PORT Mem_A = "", DIR = O, VEC = [0:(C_OPB_AWIDTH-1)], PERMIT = BASE_USER, DESC = 'Memory Address Bus', IO_IF = emc_0, IO_IS = emc_addr
PORT Mem_DQ = "", DIR = IO, VEC = [0:(C_MAX_MEM_WIDTH-1)], THREE_STATE = TRUE, TRI_I = Mem_DQ_I, TRI_O = Mem_DQ_O, TRI_T = Mem_DQ_T, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'Memory Data Bus', IO_IF = emc_0, IO_IS = emc_data
PORT Mem_DQ_I = "", DIR = I, VEC = [0:(C_MAX_MEM_WIDTH-1)]
PORT Mem_DQ_O = "", DIR = O, VEC = [0:(C_MAX_MEM_WIDTH-1)]
PORT Mem_DQ_T = "", DIR = O, VEC = [0:(C_MAX_MEM_WIDTH-1)]
PORT Mem_CEN = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Memory Chip Enable Active Low', IO_IF = emc_0, IO_IS = emc_csn
PORT Mem_OEN = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Memory Output Enable', IO_IF = emc_0, IO_IS = emc_oen
PORT Mem_WEN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Write Enable', IO_IF = emc_0, IO_IS = emc_wen
PORT Mem_QWEN = "", DIR = O, VEC = [0:((C_MAX_MEM_WIDTH/8)-1)], PERMIT = BASE_USER, DESC = 'Memory Qualified Write Enable'
PORT Mem_BEN = "", DIR = O, VEC = [0:((C_MAX_MEM_WIDTH/8)-1)], PERMIT = BASE_USER, DESC = 'Memory Byte Enable', IO_IF = emc_0, IO_IS = emc_ben
PORT Mem_RPN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Reset/Power Down', IO_IF = emc_0, IO_IS = emc_rst
PORT Mem_CE = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Memory Chip Enable Active High', IO_IF = emc_0, IO_IS = emc_ce
PORT Mem_ADV_LDN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Advanced Burst Address/Load New Address', IO_IF = emc_0, IO_IS = emc_adv_ldn
PORT Mem_LBON = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Linear/Interleaved Burst Order'
PORT Mem_CKEN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Clock Enable', IO_IF = emc_0, IO_IS = emc_cken
PORT Mem_RNW = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Read Not Write'

END
